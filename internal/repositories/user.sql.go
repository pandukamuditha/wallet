// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package repositories

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (fname, lname) VALUES ($1, $2) RETURNING id, fname, lname
`

type CreateUserParams struct {
	Fname string
	Lname string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Fname, arg.Lname)
	var i User
	err := row.Scan(&i.ID, &i.Fname, &i.Lname)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, fname, lname FROM "user" WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Fname, &i.Lname)
	return i, err
}

const getUserByFname = `-- name: GetUserByFname :many
SELECT id, fname, lname FROM "user" WHERE fname = $1
`

func (q *Queries) GetUserByFname(ctx context.Context, fname string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserByFname, fname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Fname, &i.Lname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
