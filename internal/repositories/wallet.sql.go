// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: wallet.sql

package repositories

import (
	"context"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO "wallet" (user_id) VALUES (?) RETURNING id, user_id
`

type CreateWalletRow struct {
	ID     int64
	UserID int64
}

func (q *Queries) CreateWallet(ctx context.Context, userID int64) (CreateWalletRow, error) {
	row := q.db.QueryRow(ctx, createWallet, userID)
	var i CreateWalletRow
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createWalletWithBalance = `-- name: CreateWalletWithBalance :one
INSERT INTO "wallet" (user_id, balance) VALUES (?, ?) RETURNING id, user_id, balance
`

type CreateWalletWithBalanceParams struct {
	UserID  int64
	Balance int32
}

func (q *Queries) CreateWalletWithBalance(ctx context.Context, arg CreateWalletWithBalanceParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWalletWithBalance, arg.UserID, arg.Balance)
	var i Wallet
	err := row.Scan(&i.ID, &i.UserID, &i.Balance)
	return i, err
}

const getWalletById = `-- name: GetWalletById :one
SELECT id, user_id, balance FROM "wallet" WHERE id = $1
`

func (q *Queries) GetWalletById(ctx context.Context, id int64) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletById, id)
	var i Wallet
	err := row.Scan(&i.ID, &i.UserID, &i.Balance)
	return i, err
}

const getWalletByUserId = `-- name: GetWalletByUserId :one
SELECT id, user_id, balance FROM "wallet" WHERE user_id = $1
`

func (q *Queries) GetWalletByUserId(ctx context.Context, userID int64) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByUserId, userID)
	var i Wallet
	err := row.Scan(&i.ID, &i.UserID, &i.Balance)
	return i, err
}
